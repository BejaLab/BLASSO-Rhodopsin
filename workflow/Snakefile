assert 'set' in config, "You need to specify the alignment type: --config set=original or --config set=original-profiles"
assert config['set'] in [ 'original', 'original-profiles' ], f"The requested set is not supported yet, use --config set=original or --config set=original-profiles"

targets ,= glob_wildcards('targets/{target}.fasta')

assert len(targets) > 0, "No targets/*.fasta files, nothing to do"

include: "Profiles.snakefile"

rule predict:
    input:
        expand('output/{set}/{target}.tsv', set = config['set'], target = targets)

rule train:
    input:
        expand("training/{set}/blasso.RData", set = config['set'])

rule positions:
    input:
        expand('output/{set}/{target}.pos', set = config['set'], target = targets)

rule training_prepare_sequences:
    input:
        fasta = "resources/original/Data/sequences.fas",
        dat = "resources/original/Data/wavelength.dat"
    output:
        nogaps = "training/original/sequences.fasta",
        alignment = "training/original/sequences.fas"
    conda:
        "envs/tools.yaml"
    shell:
        "seqkit fx2tab {input.fasta} | paste {input.dat} - | grep -v ^NA | cut -f2,3 | seqkit tab2fx | seqkit rename | tee {output.alignment} | seqkit seq -go {output.nogaps}"

rule training_copy_amino_acid_feature:
    input:
        "resources/original/Data/amino_acid_feature.csv"
    output:
        "training/{set}/amino_acid_feature.csv"
    shell:
        "cp {input} {output}"

rule training_copy_positions:
    input:
        "resources/original/Data/position_retinal.dat"
    output:
        "training/original/position_retinal.dat"
    shell:
        "cp {input} {output}"

#rule prepare_target_set:
#    input:
#        fasta = "original/Data/sequences.fas",
#        dat = "original/Data/wavelength.dat"
#    output:
#        targets
#    shell:
#        "seqkit fx2tab {input.fasta} | paste {input.dat} - | grep ^NA | cut -f2,3 | seqkit tab2fx | seqkit rename | seqkit seq -go {output}"

rule training_prepare_wavelength:
    input:
        "resources/original/Data/wavelength.dat"
    output:
        dat = "training/{set}/wavelength.dat",
        zero = "training/{set}/zero.dat"
    shell:
        "grep -v NA {input} | tee {output.dat} | sed s/.*/0/ > {output.zero}"

rule training_align:
    input:
        "training/{set}/sequences.fasta"
    output:
        "training/{set}/sequences.mafft"
    threads:
        workflow.cores
    conda:
        "envs/tools.yaml"
    shell:
        "mafft --thread {threads} --localpair --maxiterate 1000 {input} > {output}"

rule training_annotate:
    input:
        "training/{set}/sequences.mafft"
    output:
        "training/{set}/sequences.a2m"
    conda:
        "envs/tools.yaml"
    shell:
        """
        "$CONDA_PREFIX"/scripts/reformat.pl fas a3m {input} /dev/stdout -M 50 -v 0 | hhconsensus -i stdin -o stdout | "$CONDA_PREFIX"/scripts/addss.pl stdin stdout | "$CONDA_PREFIX"/scripts/reformat.pl a3m a2m /dev/stdin {output}
        """

rule training_convert:
    input:
        "training/{set}/sequences.a2m"
    output:
        "training/{set}/sequences.a2m.fas"
    conda:
        "envs/tools.yaml"
    shell:
        "seqkit fx2tab {input} | tail -n+4 | seqkit tab2fx | seqkit replace -sp \\\\. -r - -o {output}"

rule training_helix_positions:
    input:
        "training/{set}/sequences.a2m"
    output:
        "training/{set}/position_mafft.dat"
    conda:
        "envs/python.yaml"
    script:
        "scripts/positions.py"

rule training_mafft:
    input:
        wavelength = "training/{set}/wavelength.dat",
        zero       = "training/{set}/zero.dat",
        positions  = "training/{set}/position_mafft.dat",
        sequences  = "training/{set}/sequences.mafft",
        amino_acid_feature = "training/{set}/amino_acid_feature.csv"
    output:
        "training/{set}/blasso_mafft.RData"
    params:
        n_sample = 500,
        dim_prescreening = 100
    conda:
        "envs/r.yaml"
    script:
        "scripts/train.R"

rule training:
    input:
        wavelength = "training/{set}/wavelength.dat",
        zero       = "training/{set}/zero.dat",
        positions  = "training/{set}/position_retinal.dat",
        sequences  = "training/{set}/sequences.fas",
        amino_acid_feature = "training/{set}/amino_acid_feature.csv"
    output:
        "training/{set}/blasso.RData"
    params:
        n_sample = 10000,
        dim_prescreening = -1
    conda:
        "envs/r.yaml"
    script:
        "scripts/train.R"

rule targets_align:
    input:
        train = "training/{set}/sequences.fas",
        fasta = "targets/{target}.fasta"
    output:
        fasta = "analysis/predict/{set}/{target}.mafft",
        mapout = "analysis/predict/{set}/{target}.mafft.mapout"
    params:
        settings = "--localpair --maxiterate 1000"
    log:
        "analysis/predict/{set}/{target}.mafft.log"
    shadow:
        "minimal"
    conda:
        "envs/tools.yaml"
    threads:
        workflow.cores
    shell:
        "mafft --thread {threads} {params.settings} --keeplength --mapout --add {input.fasta} {input.train} > {output.fasta} 2> {log} && mv {input.fasta}.map {output.mapout}"

rule targets_pos:
    input:
        mapout = "analysis/predict/{set}/{target}.mafft.mapout",
        positions = "training/{set}/position_retinal.dat"
    wildcard_constraints:
        set = 'original'
    output:
        "output/{set}/{target}.pos"
    conda:
        "envs/python.yaml"
    script:
        "scripts/targets_pos.py"

rule targets_predict:
    input:
        mafft     = "analysis/predict/{set}/{target}.mafft",
        blasso    = "training/{set}/blasso.RData",
        positions = "training/{set}/position_retinal.dat",
        amino_feature_file = "training/{set}/amino_acid_feature.csv"
    output:
        "output/{set}/{target}.tsv"
    conda:
        "envs/r.yaml"
    script:
        "scripts/predict.R"

rule copy_targets:
    input:
        "targets/{target}.fasta"
    output:
        "analysis/targets/{target}/sequences.fasta"
    shell:
        "cp {input} {output}"

rule copy_references:
    input:
        "training/{set}/sequences.fasta"
    output:
        "training/{set}-profiles/sequences.fasta"
    shell:
        "cp {input} {output}"
